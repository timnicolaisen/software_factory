/**
 * generated by Xtext 2.9.1
 */
package de.htwdd.sf.beleg.s70307s70429.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import de.htwdd.sf.beleg.s70307s70429.myDsl.Atom;
import de.htwdd.sf.beleg.s70307s70429.myDsl.Clause;
import de.htwdd.sf.beleg.s70307s70429.myDsl.Exquery;
import de.htwdd.sf.beleg.s70307s70429.myDsl.Fact;
import de.htwdd.sf.beleg.s70307s70429.myDsl.Folge;
import de.htwdd.sf.beleg.s70307s70429.myDsl.Functor;
import de.htwdd.sf.beleg.s70307s70429.myDsl.Ident;
import de.htwdd.sf.beleg.s70307s70429.myDsl.List;
import de.htwdd.sf.beleg.s70307s70429.myDsl.Nonemptylist;
import de.htwdd.sf.beleg.s70307s70429.myDsl.Number2;
import de.htwdd.sf.beleg.s70307s70429.myDsl.Predicate;
import de.htwdd.sf.beleg.s70307s70429.myDsl.Program;
import de.htwdd.sf.beleg.s70307s70429.myDsl.Prologdsl;
import de.htwdd.sf.beleg.s70307s70429.myDsl.Query;
import de.htwdd.sf.beleg.s70307s70429.myDsl.Rule;
import de.htwdd.sf.beleg.s70307s70429.myDsl.Term;
import de.htwdd.sf.beleg.s70307s70429.myDsl.Variable2;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IntegerRange;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  private String code = "";
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Prologdsl> _filter = Iterables.<Prologdsl>filter(_iterable, Prologdsl.class);
    for (final Prologdsl e : _filter) {
      this.traverse(e);
    }
    fsa.generateFile("Prologdsl.lsp", this.code);
  }
  
  public String traverse(final Prologdsl to) {
    String _xblockexpression = null;
    {
      this.conc("(prolog (quote\n(");
      Program _prologdsl = to.getPrologdsl();
      this.traverse(_prologdsl);
      this.conc("))\n(quote\n(");
      Exquery _ex = to.getEx();
      this.traverse(_ex);
      _xblockexpression = this.conc(")))");
    }
    return _xblockexpression;
  }
  
  public void traverse(final Program to) {
    System.out.println("traverse Program");
    Clause _clause1 = to.getClause1();
    this.traverse(_clause1);
    Clause _clause1_1 = to.getClause1();
    boolean _notEquals = (!Objects.equal(_clause1_1, null));
    if (_notEquals) {
      EList<Clause> _clause2 = to.getClause2();
      for (final Clause allc : _clause2) {
        this.traverse(allc);
      }
    }
  }
  
  public void traverse(final Exquery to) {
    System.out.println("traverse Exquery");
    Query _q = to.getQ();
    this.traverse(_q);
  }
  
  public void traverse(final Query to) {
    System.out.println("traverse Query");
    Predicate _query = to.getQuery();
    this.traverse(_query);
    EList<Predicate> _pred = to.getPred();
    boolean _notEquals = (!Objects.equal(_pred, null));
    if (_notEquals) {
      EList<Predicate> _pred_1 = to.getPred();
      for (final Predicate allpred : _pred_1) {
        this.traverse(allpred);
      }
    }
  }
  
  public String traverse(final Clause to) {
    String _xblockexpression = null;
    {
      System.out.println("traverse Clause");
      this.conc("(");
      Predicate _fact = to.getFact();
      this.traverse(_fact);
      EObject _clause1 = to.getClause1();
      if ((_clause1 instanceof Fact)) {
        System.out.println("Fact erkannt");
        EObject _clause1_1 = to.getClause1();
        this.traverse(((Fact) _clause1_1));
      } else {
        EObject _clause1_2 = to.getClause1();
        if ((_clause1_2 instanceof Rule)) {
          System.out.println("Rule erkannt");
          EObject _clause1_3 = to.getClause1();
          this.traverse(((Rule) _clause1_3));
        } else {
          this.conc(" ()");
          System.out.println("gar nichts erkannt");
        }
      }
      _xblockexpression = this.conc(")\n");
    }
    return _xblockexpression;
  }
  
  public Object traverse(final Fact to) {
    return null;
  }
  
  public void traverse(final Rule to) {
    Query _q = to.getQ();
    this.traverse(_q);
  }
  
  public String traverse(final Predicate to) {
    String _xblockexpression = null;
    {
      System.out.println("traverse Predicate");
      this.conc("(");
      Functor _pred = to.getPred();
      this.traverse(_pred);
      Term _t = to.getT();
      this.traverse(_t);
      EList<Term> _t2 = to.getT2();
      boolean _notEquals = (!Objects.equal(_t2, null));
      if (_notEquals) {
        EList<Term> _t2_1 = to.getT2();
        for (final Term allt2 : _t2_1) {
          this.traverse(allt2);
        }
      }
      _xblockexpression = this.conc(")");
    }
    return _xblockexpression;
  }
  
  public String traverse(final Functor to) {
    String _xblockexpression = null;
    {
      System.out.println("traverse Functor");
      Ident _func = to.getFunc();
      _xblockexpression = this.traverse(_func);
    }
    return _xblockexpression;
  }
  
  public String traverse(final Term to) {
    String _xblockexpression = null;
    {
      System.out.println("traverse Term");
      String _xifexpression = null;
      EObject _term = to.getTerm();
      if ((_term instanceof Atom)) {
        String _xblockexpression_1 = null;
        {
          System.out.println("Atom erkannt");
          EObject _term_1 = to.getTerm();
          _xblockexpression_1 = this.traverse(((Atom) _term_1));
        }
        _xifexpression = _xblockexpression_1;
      } else {
        String _xifexpression_1 = null;
        EObject _term_1 = to.getTerm();
        if ((_term_1 instanceof List)) {
          String _xblockexpression_2 = null;
          {
            System.out.println("List erkannt");
            EObject _term_2 = to.getTerm();
            _xblockexpression_2 = this.traverse(((List) _term_2));
          }
          _xifexpression_1 = _xblockexpression_2;
        } else {
          this.conc(" ()");
          System.out.println("gar nichts erkannt");
        }
        _xifexpression = _xifexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  public String traverse(final Atom to) {
    String _xblockexpression = null;
    {
      System.out.println("traverse Atom");
      String _xifexpression = null;
      EObject _xx = to.getXx();
      if ((_xx instanceof Ident)) {
        String _xblockexpression_1 = null;
        {
          System.out.println("Ident erkannt");
          EObject _xx_1 = to.getXx();
          _xblockexpression_1 = this.traverse(((Ident) _xx_1));
        }
        _xifexpression = _xblockexpression_1;
      } else {
        String _xifexpression_1 = null;
        EObject _xx_1 = to.getXx();
        if ((_xx_1 instanceof Number2)) {
          String _xblockexpression_2 = null;
          {
            System.out.println("Number2 erkannt");
            EObject _xx_2 = to.getXx();
            _xblockexpression_2 = this.traverse(((Number2) _xx_2));
          }
          _xifexpression_1 = _xblockexpression_2;
        } else {
          String _xifexpression_2 = null;
          EObject _xx_2 = to.getXx();
          if ((_xx_2 instanceof Variable2)) {
            String _xblockexpression_3 = null;
            {
              System.out.println("Variable2 erkannt");
              EObject _xx_3 = to.getXx();
              _xblockexpression_3 = this.traverse(((Variable2) _xx_3));
            }
            _xifexpression_2 = _xblockexpression_3;
          } else {
            this.conc(" ()");
            System.out.println("gar nichts erkannt");
          }
          _xifexpression_1 = _xifexpression_2;
        }
        _xifexpression = _xifexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  public String traverse(final List e) {
    String _xifexpression = null;
    Nonemptylist _nel = e.getNel();
    boolean _equals = Objects.equal(_nel, null);
    if (_equals) {
      _xifexpression = this.conc("()");
    } else {
      Nonemptylist _nel_1 = e.getNel();
      _xifexpression = this.traverse(_nel_1);
    }
    return _xifexpression;
  }
  
  public String traverse(final Nonemptylist e) {
    String _xblockexpression = null;
    {
      this.conc("(cons ");
      Folge _folge = e.getFolge();
      boolean _notEquals = (!Objects.equal(_folge, null));
      if (_notEquals) {
        Folge _folge_1 = e.getFolge();
        this.traverse(_folge_1);
      } else {
        Atom _atom = e.getAtom();
        boolean _notEquals_1 = (!Objects.equal(_atom, null));
        if (_notEquals_1) {
          Atom _atom_1 = e.getAtom();
          this.traverse(_atom_1);
        }
        this.conc(" ");
        Term _term = e.getTerm();
        boolean _notEquals_2 = (!Objects.equal(_term, null));
        if (_notEquals_2) {
          Term _term_1 = e.getTerm();
          this.traverse(_term_1);
        }
      }
      _xblockexpression = this.conc(")");
    }
    return _xblockexpression;
  }
  
  public void traverse(final Folge e) {
    int i = 0;
    Atom _atom = e.getAtom();
    boolean _notEquals = (!Objects.equal(_atom, null));
    if (_notEquals) {
      Atom _atom_1 = e.getAtom();
      this.traverse(_atom_1);
    }
    EList<Atom> _atoms = e.getAtoms();
    boolean _notEquals_1 = (!Objects.equal(_atoms, null));
    if (_notEquals_1) {
      EList<Atom> _atoms_1 = e.getAtoms();
      for (final Atom atom : _atoms_1) {
        {
          i = (i + 1);
          this.conc(" (cons ");
          this.traverse(((Atom) atom));
        }
      }
      this.conc(" ()");
      IntegerRange _upTo = new IntegerRange(1, i);
      for (final Integer j : _upTo) {
        this.conc(")");
      }
    }
  }
  
  public String traverse(final Variable2 k) {
    String _var1 = k.getVar1();
    String _plus = (" " + _var1);
    String _plus_1 = (_plus + " ");
    return this.conc(_plus_1);
  }
  
  public String traverse(final Number2 k) {
    int _wert = k.getWert();
    String _plus = (" " + Integer.valueOf(_wert));
    String _plus_1 = (_plus + " ");
    return this.conc(_plus_1);
  }
  
  public String traverse(final Ident k) {
    String _name = k.getName();
    String _plus = (" " + _name);
    String _plus_1 = (_plus + " ");
    return this.conc(_plus_1);
  }
  
  public String conc(final String str) {
    return this.code = (this.code + str);
  }
}
