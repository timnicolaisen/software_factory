/*
 * generated by Xtext 2.9.2
 */
package de.htwdd.sf.beleg.s70307s70429.serializer;

import com.google.inject.Inject;
import de.htwdd.sf.beleg.s70307s70429.myDsl.Atom;
import de.htwdd.sf.beleg.s70307s70429.myDsl.Clause;
import de.htwdd.sf.beleg.s70307s70429.myDsl.Exquery;
import de.htwdd.sf.beleg.s70307s70429.myDsl.Fact;
import de.htwdd.sf.beleg.s70307s70429.myDsl.Folge;
import de.htwdd.sf.beleg.s70307s70429.myDsl.Functor;
import de.htwdd.sf.beleg.s70307s70429.myDsl.Ident;
import de.htwdd.sf.beleg.s70307s70429.myDsl.List;
import de.htwdd.sf.beleg.s70307s70429.myDsl.MyDslPackage;
import de.htwdd.sf.beleg.s70307s70429.myDsl.Nonemptylist;
import de.htwdd.sf.beleg.s70307s70429.myDsl.Number2;
import de.htwdd.sf.beleg.s70307s70429.myDsl.Predicate;
import de.htwdd.sf.beleg.s70307s70429.myDsl.Program;
import de.htwdd.sf.beleg.s70307s70429.myDsl.Prologdsl;
import de.htwdd.sf.beleg.s70307s70429.myDsl.Query;
import de.htwdd.sf.beleg.s70307s70429.myDsl.Rule;
import de.htwdd.sf.beleg.s70307s70429.myDsl.Term;
import de.htwdd.sf.beleg.s70307s70429.myDsl.Variable2;
import de.htwdd.sf.beleg.s70307s70429.services.MyDslGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.ATOM:
				sequence_Atom(context, (Atom) semanticObject); 
				return; 
			case MyDslPackage.CLAUSE:
				sequence_Clause(context, (Clause) semanticObject); 
				return; 
			case MyDslPackage.EXQUERY:
				sequence_Exquery(context, (Exquery) semanticObject); 
				return; 
			case MyDslPackage.FACT:
				sequence_Fact(context, (Fact) semanticObject); 
				return; 
			case MyDslPackage.FOLGE:
				sequence_Folge(context, (Folge) semanticObject); 
				return; 
			case MyDslPackage.FUNCTOR:
				sequence_Functor(context, (Functor) semanticObject); 
				return; 
			case MyDslPackage.IDENT:
				sequence_Ident(context, (Ident) semanticObject); 
				return; 
			case MyDslPackage.LIST:
				sequence_List(context, (List) semanticObject); 
				return; 
			case MyDslPackage.NONEMPTYLIST:
				sequence_Nonemptylist(context, (Nonemptylist) semanticObject); 
				return; 
			case MyDslPackage.NUMBER2:
				sequence_Number2(context, (Number2) semanticObject); 
				return; 
			case MyDslPackage.PREDICATE:
				sequence_Predicate(context, (Predicate) semanticObject); 
				return; 
			case MyDslPackage.PROGRAM:
				sequence_Program(context, (Program) semanticObject); 
				return; 
			case MyDslPackage.PROLOGDSL:
				sequence_Prologdsl(context, (Prologdsl) semanticObject); 
				return; 
			case MyDslPackage.QUERY:
				sequence_Query(context, (Query) semanticObject); 
				return; 
			case MyDslPackage.RULE:
				sequence_Rule(context, (Rule) semanticObject); 
				return; 
			case MyDslPackage.TERM:
				sequence_Term(context, (Term) semanticObject); 
				return; 
			case MyDslPackage.VARIABLE2:
				sequence_Variable2(context, (Variable2) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Atom returns Atom
	 *
	 * Constraint:
	 *     (xx=Ident | xx=Number2 | xx=Variable2)
	 */
	protected void sequence_Atom(ISerializationContext context, Atom semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Clause returns Clause
	 *
	 * Constraint:
	 *     (fact=Predicate (clause1=Fact | clause1=Rule))
	 */
	protected void sequence_Clause(ISerializationContext context, Clause semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Exquery returns Exquery
	 *
	 * Constraint:
	 *     q=Query
	 */
	protected void sequence_Exquery(ISerializationContext context, Exquery semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.EXQUERY__Q) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.EXQUERY__Q));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExqueryAccess().getQQueryParserRuleCall_1_0(), semanticObject.getQ());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Fact returns Fact
	 *
	 * Constraint:
	 *     {Fact}
	 */
	protected void sequence_Fact(ISerializationContext context, Fact semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Folge returns Folge
	 *
	 * Constraint:
	 *     (atom=Atom atoms+=Atom*)
	 */
	protected void sequence_Folge(ISerializationContext context, Folge semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Functor returns Functor
	 *
	 * Constraint:
	 *     func=Ident
	 */
	protected void sequence_Functor(ISerializationContext context, Functor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.FUNCTOR__FUNC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.FUNCTOR__FUNC));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFunctorAccess().getFuncIdentParserRuleCall_0(), semanticObject.getFunc());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Ident returns Ident
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Ident(ISerializationContext context, Ident semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.IDENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.IDENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIdentAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     List returns List
	 *
	 * Constraint:
	 *     nel=Nonemptylist?
	 */
	protected void sequence_List(ISerializationContext context, List semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Nonemptylist returns Nonemptylist
	 *
	 * Constraint:
	 *     (folge=Folge | (atom=Atom term=Term))
	 */
	protected void sequence_Nonemptylist(ISerializationContext context, Nonemptylist semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Number2 returns Number2
	 *
	 * Constraint:
	 *     wert=INT
	 */
	protected void sequence_Number2(ISerializationContext context, Number2 semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.NUMBER2__WERT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.NUMBER2__WERT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumber2Access().getWertINTTerminalRuleCall_0(), semanticObject.getWert());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Predicate returns Predicate
	 *
	 * Constraint:
	 *     (pred=Functor t=Term t2+=Term*)
	 */
	protected void sequence_Predicate(ISerializationContext context, Predicate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Program returns Program
	 *
	 * Constraint:
	 *     (clause1=Clause clause2+=Clause*)
	 */
	protected void sequence_Program(ISerializationContext context, Program semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Prologdsl returns Prologdsl
	 *
	 * Constraint:
	 *     (prologdsl=Program ex=Exquery)
	 */
	protected void sequence_Prologdsl(ISerializationContext context, Prologdsl semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PROLOGDSL__PROLOGDSL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PROLOGDSL__PROLOGDSL));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PROLOGDSL__EX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PROLOGDSL__EX));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrologdslAccess().getPrologdslProgramParserRuleCall_0_0(), semanticObject.getPrologdsl());
		feeder.accept(grammarAccess.getPrologdslAccess().getExExqueryParserRuleCall_1_0(), semanticObject.getEx());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Query returns Query
	 *
	 * Constraint:
	 *     (query=Predicate pred+=Predicate*)
	 */
	protected void sequence_Query(ISerializationContext context, Query semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Rule returns Rule
	 *
	 * Constraint:
	 *     q=Query
	 */
	protected void sequence_Rule(ISerializationContext context, Rule semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.RULE__Q) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.RULE__Q));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRuleAccess().getQQueryParserRuleCall_1_0(), semanticObject.getQ());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Term returns Term
	 *
	 * Constraint:
	 *     (term=Atom | term=List)
	 */
	protected void sequence_Term(ISerializationContext context, Term semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Variable2 returns Variable2
	 *
	 * Constraint:
	 *     var1=VAR
	 */
	protected void sequence_Variable2(ISerializationContext context, Variable2 semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.VARIABLE2__VAR1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.VARIABLE2__VAR1));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariable2Access().getVar1VARTerminalRuleCall_0(), semanticObject.getVar1());
		feeder.finish();
	}
	
	
}
