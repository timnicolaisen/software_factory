/*
 * generated by Xtext 2.9.2
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package de.htwdd.sf.beleg.s70307s70429.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.htwdd.sf.beleg.s70307s70429.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import de.htwdd.sf.beleg.s70307s70429.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRulePrologdsl
entryRulePrologdsl
:
{ before(grammarAccess.getPrologdslRule()); }
	 rulePrologdsl
{ after(grammarAccess.getPrologdslRule()); } 
	 EOF 
;

// Rule Prologdsl
rulePrologdsl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrologdslAccess().getGroup()); }
		(rule__Prologdsl__Group__0)
		{ after(grammarAccess.getPrologdslAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProgram
entryRuleProgram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgramAccess().getGroup()); }
		(rule__Program__Group__0)
		{ after(grammarAccess.getProgramAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExquery
entryRuleExquery
:
{ before(grammarAccess.getExqueryRule()); }
	 ruleExquery
{ after(grammarAccess.getExqueryRule()); } 
	 EOF 
;

// Rule Exquery
ruleExquery 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExqueryAccess().getGroup()); }
		(rule__Exquery__Group__0)
		{ after(grammarAccess.getExqueryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQuery
entryRuleQuery
:
{ before(grammarAccess.getQueryRule()); }
	 ruleQuery
{ after(grammarAccess.getQueryRule()); } 
	 EOF 
;

// Rule Query
ruleQuery 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQueryAccess().getGroup()); }
		(rule__Query__Group__0)
		{ after(grammarAccess.getQueryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClause
entryRuleClause
:
{ before(grammarAccess.getClauseRule()); }
	 ruleClause
{ after(grammarAccess.getClauseRule()); } 
	 EOF 
;

// Rule Clause
ruleClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClauseAccess().getGroup()); }
		(rule__Clause__Group__0)
		{ after(grammarAccess.getClauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFact
entryRuleFact
:
{ before(grammarAccess.getFactRule()); }
	 ruleFact
{ after(grammarAccess.getFactRule()); } 
	 EOF 
;

// Rule Fact
ruleFact 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFactAccess().getGroup()); }
		(rule__Fact__Group__0)
		{ after(grammarAccess.getFactAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRule
entryRuleRule
:
{ before(grammarAccess.getRuleRule()); }
	 ruleRule
{ after(grammarAccess.getRuleRule()); } 
	 EOF 
;

// Rule Rule
ruleRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleAccess().getGroup()); }
		(rule__Rule__Group__0)
		{ after(grammarAccess.getRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePredicate
entryRulePredicate
:
{ before(grammarAccess.getPredicateRule()); }
	 rulePredicate
{ after(grammarAccess.getPredicateRule()); } 
	 EOF 
;

// Rule Predicate
rulePredicate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPredicateAccess().getGroup()); }
		(rule__Predicate__Group__0)
		{ after(grammarAccess.getPredicateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctor
entryRuleFunctor
:
{ before(grammarAccess.getFunctorRule()); }
	 ruleFunctor
{ after(grammarAccess.getFunctorRule()); } 
	 EOF 
;

// Rule Functor
ruleFunctor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctorAccess().getFuncAssignment()); }
		(rule__Functor__FuncAssignment)
		{ after(grammarAccess.getFunctorAccess().getFuncAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTerm
entryRuleTerm
:
{ before(grammarAccess.getTermRule()); }
	 ruleTerm
{ after(grammarAccess.getTermRule()); } 
	 EOF 
;

// Rule Term
ruleTerm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTermAccess().getTermAssignment()); }
		(rule__Term__TermAssignment)
		{ after(grammarAccess.getTermAccess().getTermAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAtom
entryRuleAtom
:
{ before(grammarAccess.getAtomRule()); }
	 ruleAtom
{ after(grammarAccess.getAtomRule()); } 
	 EOF 
;

// Rule Atom
ruleAtom 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAtomAccess().getXxAssignment()); }
		(rule__Atom__XxAssignment)
		{ after(grammarAccess.getAtomAccess().getXxAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleList
entryRuleList
:
{ before(grammarAccess.getListRule()); }
	 ruleList
{ after(grammarAccess.getListRule()); } 
	 EOF 
;

// Rule List
ruleList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListAccess().getAlternatives()); }
		(rule__List__Alternatives)
		{ after(grammarAccess.getListAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNonemptylist
entryRuleNonemptylist
:
{ before(grammarAccess.getNonemptylistRule()); }
	 ruleNonemptylist
{ after(grammarAccess.getNonemptylistRule()); } 
	 EOF 
;

// Rule Nonemptylist
ruleNonemptylist 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNonemptylistAccess().getAlternatives()); }
		(rule__Nonemptylist__Alternatives)
		{ after(grammarAccess.getNonemptylistAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFolge
entryRuleFolge
:
{ before(grammarAccess.getFolgeRule()); }
	 ruleFolge
{ after(grammarAccess.getFolgeRule()); } 
	 EOF 
;

// Rule Folge
ruleFolge 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFolgeAccess().getGroup()); }
		(rule__Folge__Group__0)
		{ after(grammarAccess.getFolgeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIdent
entryRuleIdent
:
{ before(grammarAccess.getIdentRule()); }
	 ruleIdent
{ after(grammarAccess.getIdentRule()); } 
	 EOF 
;

// Rule Ident
ruleIdent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIdentAccess().getNameAssignment()); }
		(rule__Ident__NameAssignment)
		{ after(grammarAccess.getIdentAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumber2
entryRuleNumber2
:
{ before(grammarAccess.getNumber2Rule()); }
	 ruleNumber2
{ after(grammarAccess.getNumber2Rule()); } 
	 EOF 
;

// Rule Number2
ruleNumber2 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumber2Access().getWertAssignment()); }
		(rule__Number2__WertAssignment)
		{ after(grammarAccess.getNumber2Access().getWertAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable2
entryRuleVariable2
:
{ before(grammarAccess.getVariable2Rule()); }
	 ruleVariable2
{ after(grammarAccess.getVariable2Rule()); } 
	 EOF 
;

// Rule Variable2
ruleVariable2 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariable2Access().getVar1Assignment()); }
		(rule__Variable2__Var1Assignment)
		{ after(grammarAccess.getVariable2Access().getVar1Assignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Clause1Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getClause1FactParserRuleCall_1_0_0()); }
		ruleFact
		{ after(grammarAccess.getClauseAccess().getClause1FactParserRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getClauseAccess().getClause1RuleParserRuleCall_1_0_1()); }
		ruleRule
		{ after(grammarAccess.getClauseAccess().getClause1RuleParserRuleCall_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__TermAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTermAccess().getTermAtomParserRuleCall_0_0()); }
		ruleAtom
		{ after(grammarAccess.getTermAccess().getTermAtomParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getTermAccess().getTermListParserRuleCall_0_1()); }
		ruleList
		{ after(grammarAccess.getTermAccess().getTermListParserRuleCall_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__XxAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomAccess().getXxIdentParserRuleCall_0_0()); }
		ruleIdent
		{ after(grammarAccess.getAtomAccess().getXxIdentParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAtomAccess().getXxNumber2ParserRuleCall_0_1()); }
		ruleNumber2
		{ after(grammarAccess.getAtomAccess().getXxNumber2ParserRuleCall_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getAtomAccess().getXxVariable2ParserRuleCall_0_2()); }
		ruleVariable2
		{ after(grammarAccess.getAtomAccess().getXxVariable2ParserRuleCall_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListAccess().getGroup_0()); }
		(rule__List__Group_0__0)
		{ after(grammarAccess.getListAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getListAccess().getNelAssignment_1()); }
		(rule__List__NelAssignment_1)
		{ after(grammarAccess.getListAccess().getNelAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nonemptylist__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNonemptylistAccess().getGroup_0()); }
		(rule__Nonemptylist__Group_0__0)
		{ after(grammarAccess.getNonemptylistAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getNonemptylistAccess().getGroup_1()); }
		(rule__Nonemptylist__Group_1__0)
		{ after(grammarAccess.getNonemptylistAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prologdsl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Prologdsl__Group__0__Impl
	rule__Prologdsl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Prologdsl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrologdslAccess().getPrologdslAssignment_0()); }
	(rule__Prologdsl__PrologdslAssignment_0)
	{ after(grammarAccess.getPrologdslAccess().getPrologdslAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prologdsl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Prologdsl__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Prologdsl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrologdslAccess().getExAssignment_1()); }
	(rule__Prologdsl__ExAssignment_1)
	{ after(grammarAccess.getPrologdslAccess().getExAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__0__Impl
	rule__Program__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getClause1Assignment_0()); }
	(rule__Program__Clause1Assignment_0)
	{ after(grammarAccess.getProgramAccess().getClause1Assignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getClause2Assignment_1()); }
	(rule__Program__Clause2Assignment_1)*
	{ after(grammarAccess.getProgramAccess().getClause2Assignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Exquery__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exquery__Group__0__Impl
	rule__Exquery__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exquery__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExqueryAccess().getQuestionMarkHyphenMinusKeyword_0()); }
	'?-'
	{ after(grammarAccess.getExqueryAccess().getQuestionMarkHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exquery__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exquery__Group__1__Impl
	rule__Exquery__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Exquery__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExqueryAccess().getQAssignment_1()); }
	(rule__Exquery__QAssignment_1)
	{ after(grammarAccess.getExqueryAccess().getQAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exquery__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exquery__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exquery__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExqueryAccess().getFullStopKeyword_2()); }
	'.'
	{ after(grammarAccess.getExqueryAccess().getFullStopKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Query__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Query__Group__0__Impl
	rule__Query__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQueryAccess().getQueryAssignment_0()); }
	(rule__Query__QueryAssignment_0)
	{ after(grammarAccess.getQueryAccess().getQueryAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Query__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQueryAccess().getGroup_1()); }
	(rule__Query__Group_1__0)*
	{ after(grammarAccess.getQueryAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Query__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Query__Group_1__0__Impl
	rule__Query__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQueryAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getQueryAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Query__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQueryAccess().getPredAssignment_1_1()); }
	(rule__Query__PredAssignment_1_1)
	{ after(grammarAccess.getQueryAccess().getPredAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Clause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group__0__Impl
	rule__Clause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getFactAssignment_0()); }
	(rule__Clause__FactAssignment_0)
	{ after(grammarAccess.getClauseAccess().getFactAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getClause1Assignment_1()); }
	(rule__Clause__Clause1Assignment_1)
	{ after(grammarAccess.getClauseAccess().getClause1Assignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Fact__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fact__Group__0__Impl
	rule__Fact__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fact__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactAccess().getFactAction_0()); }
	()
	{ after(grammarAccess.getFactAccess().getFactAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fact__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fact__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fact__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getFactAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__0__Impl
	rule__Rule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getColonHyphenMinusKeyword_0()); }
	':-'
	{ after(grammarAccess.getRuleAccess().getColonHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__1__Impl
	rule__Rule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getQAssignment_1()); }
	(rule__Rule__QAssignment_1)
	{ after(grammarAccess.getRuleAccess().getQAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getFullStopKeyword_2()); }
	'.'
	{ after(grammarAccess.getRuleAccess().getFullStopKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Predicate__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predicate__Group__0__Impl
	rule__Predicate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateAccess().getPredAssignment_0()); }
	(rule__Predicate__PredAssignment_0)
	{ after(grammarAccess.getPredicateAccess().getPredAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predicate__Group__1__Impl
	rule__Predicate__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getPredicateAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predicate__Group__2__Impl
	rule__Predicate__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateAccess().getTAssignment_2()); }
	(rule__Predicate__TAssignment_2)
	{ after(grammarAccess.getPredicateAccess().getTAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predicate__Group__3__Impl
	rule__Predicate__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateAccess().getGroup_3()); }
	(rule__Predicate__Group_3__0)*
	{ after(grammarAccess.getPredicateAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predicate__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getPredicateAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Predicate__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predicate__Group_3__0__Impl
	rule__Predicate__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateAccess().getCommaKeyword_3_0()); }
	','
	{ after(grammarAccess.getPredicateAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predicate__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateAccess().getT2Assignment_3_1()); }
	(rule__Predicate__T2Assignment_3_1)
	{ after(grammarAccess.getPredicateAccess().getT2Assignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__List__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group_0__0__Impl
	rule__List__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getListAction_0_0()); }
	()
	{ after(grammarAccess.getListAccess().getListAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group_0__1__Impl
	rule__List__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getLeftSquareBracketKeyword_0_1()); }
	'['
	{ after(grammarAccess.getListAccess().getLeftSquareBracketKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getRightSquareBracketKeyword_0_2()); }
	']'
	{ after(grammarAccess.getListAccess().getRightSquareBracketKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Nonemptylist__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Nonemptylist__Group_0__0__Impl
	rule__Nonemptylist__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Nonemptylist__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNonemptylistAccess().getLeftSquareBracketKeyword_0_0()); }
	'['
	{ after(grammarAccess.getNonemptylistAccess().getLeftSquareBracketKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nonemptylist__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Nonemptylist__Group_0__1__Impl
	rule__Nonemptylist__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Nonemptylist__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNonemptylistAccess().getFolgeAssignment_0_1()); }
	(rule__Nonemptylist__FolgeAssignment_0_1)
	{ after(grammarAccess.getNonemptylistAccess().getFolgeAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nonemptylist__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Nonemptylist__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Nonemptylist__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNonemptylistAccess().getRightSquareBracketKeyword_0_2()); }
	']'
	{ after(grammarAccess.getNonemptylistAccess().getRightSquareBracketKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Nonemptylist__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Nonemptylist__Group_1__0__Impl
	rule__Nonemptylist__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Nonemptylist__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNonemptylistAccess().getLeftSquareBracketKeyword_1_0()); }
	'['
	{ after(grammarAccess.getNonemptylistAccess().getLeftSquareBracketKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nonemptylist__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Nonemptylist__Group_1__1__Impl
	rule__Nonemptylist__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Nonemptylist__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNonemptylistAccess().getAtomAssignment_1_1()); }
	(rule__Nonemptylist__AtomAssignment_1_1)
	{ after(grammarAccess.getNonemptylistAccess().getAtomAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nonemptylist__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Nonemptylist__Group_1__2__Impl
	rule__Nonemptylist__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Nonemptylist__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNonemptylistAccess().getVerticalLineKeyword_1_2()); }
	'|'
	{ after(grammarAccess.getNonemptylistAccess().getVerticalLineKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nonemptylist__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Nonemptylist__Group_1__3__Impl
	rule__Nonemptylist__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Nonemptylist__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNonemptylistAccess().getTermAssignment_1_3()); }
	(rule__Nonemptylist__TermAssignment_1_3)
	{ after(grammarAccess.getNonemptylistAccess().getTermAssignment_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nonemptylist__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Nonemptylist__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Nonemptylist__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNonemptylistAccess().getRightSquareBracketKeyword_1_4()); }
	']'
	{ after(grammarAccess.getNonemptylistAccess().getRightSquareBracketKeyword_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Folge__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Folge__Group__0__Impl
	rule__Folge__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Folge__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFolgeAccess().getAtomAssignment_0()); }
	(rule__Folge__AtomAssignment_0)
	{ after(grammarAccess.getFolgeAccess().getAtomAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Folge__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Folge__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Folge__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFolgeAccess().getGroup_1()); }
	(rule__Folge__Group_1__0)*
	{ after(grammarAccess.getFolgeAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Folge__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Folge__Group_1__0__Impl
	rule__Folge__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Folge__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFolgeAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getFolgeAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Folge__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Folge__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Folge__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFolgeAccess().getAtomsAssignment_1_1()); }
	(rule__Folge__AtomsAssignment_1_1)
	{ after(grammarAccess.getFolgeAccess().getAtomsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Prologdsl__PrologdslAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrologdslAccess().getPrologdslProgramParserRuleCall_0_0()); }
		ruleProgram
		{ after(grammarAccess.getPrologdslAccess().getPrologdslProgramParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prologdsl__ExAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrologdslAccess().getExExqueryParserRuleCall_1_0()); }
		ruleExquery
		{ after(grammarAccess.getPrologdslAccess().getExExqueryParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Clause1Assignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getClause1ClauseParserRuleCall_0_0()); }
		ruleClause
		{ after(grammarAccess.getProgramAccess().getClause1ClauseParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Clause2Assignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getClause2ClauseParserRuleCall_1_0()); }
		ruleClause
		{ after(grammarAccess.getProgramAccess().getClause2ClauseParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exquery__QAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExqueryAccess().getQQueryParserRuleCall_1_0()); }
		ruleQuery
		{ after(grammarAccess.getExqueryAccess().getQQueryParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__QueryAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQueryAccess().getQueryPredicateParserRuleCall_0_0()); }
		rulePredicate
		{ after(grammarAccess.getQueryAccess().getQueryPredicateParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__PredAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQueryAccess().getPredPredicateParserRuleCall_1_1_0()); }
		rulePredicate
		{ after(grammarAccess.getQueryAccess().getPredPredicateParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__FactAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getFactPredicateParserRuleCall_0_0()); }
		rulePredicate
		{ after(grammarAccess.getClauseAccess().getFactPredicateParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Clause1Assignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getClause1Alternatives_1_0()); }
		(rule__Clause__Clause1Alternatives_1_0)
		{ after(grammarAccess.getClauseAccess().getClause1Alternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__QAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getQQueryParserRuleCall_1_0()); }
		ruleQuery
		{ after(grammarAccess.getRuleAccess().getQQueryParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__PredAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateAccess().getPredFunctorParserRuleCall_0_0()); }
		ruleFunctor
		{ after(grammarAccess.getPredicateAccess().getPredFunctorParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__TAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateAccess().getTTermParserRuleCall_2_0()); }
		ruleTerm
		{ after(grammarAccess.getPredicateAccess().getTTermParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__T2Assignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateAccess().getT2TermParserRuleCall_3_1_0()); }
		ruleTerm
		{ after(grammarAccess.getPredicateAccess().getT2TermParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Functor__FuncAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctorAccess().getFuncIdentParserRuleCall_0()); }
		ruleIdent
		{ after(grammarAccess.getFunctorAccess().getFuncIdentParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__TermAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTermAccess().getTermAlternatives_0()); }
		(rule__Term__TermAlternatives_0)
		{ after(grammarAccess.getTermAccess().getTermAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__XxAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomAccess().getXxAlternatives_0()); }
		(rule__Atom__XxAlternatives_0)
		{ after(grammarAccess.getAtomAccess().getXxAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__NelAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListAccess().getNelNonemptylistParserRuleCall_1_0()); }
		ruleNonemptylist
		{ after(grammarAccess.getListAccess().getNelNonemptylistParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nonemptylist__FolgeAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNonemptylistAccess().getFolgeFolgeParserRuleCall_0_1_0()); }
		ruleFolge
		{ after(grammarAccess.getNonemptylistAccess().getFolgeFolgeParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nonemptylist__AtomAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNonemptylistAccess().getAtomAtomParserRuleCall_1_1_0()); }
		ruleAtom
		{ after(grammarAccess.getNonemptylistAccess().getAtomAtomParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nonemptylist__TermAssignment_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNonemptylistAccess().getTermTermParserRuleCall_1_3_0()); }
		ruleTerm
		{ after(grammarAccess.getNonemptylistAccess().getTermTermParserRuleCall_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Folge__AtomAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFolgeAccess().getAtomAtomParserRuleCall_0_0()); }
		ruleAtom
		{ after(grammarAccess.getFolgeAccess().getAtomAtomParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Folge__AtomsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFolgeAccess().getAtomsAtomParserRuleCall_1_1_0()); }
		ruleAtom
		{ after(grammarAccess.getFolgeAccess().getAtomsAtomParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ident__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIdentAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getIdentAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number2__WertAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumber2Access().getWertINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getNumber2Access().getWertINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable2__Var1Assignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariable2Access().getVar1VARTerminalRuleCall_0()); }
		RULE_VAR
		{ after(grammarAccess.getVariable2Access().getVar1VARTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_VAR : 'A'..'Z';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
